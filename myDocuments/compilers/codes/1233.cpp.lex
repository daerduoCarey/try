<Operate, #> <Keyword, include> <Operate, <> <Identifier, cstdio> <Operate, >> <Operate, #> <Keyword, include> <Operate, <> <Identifier, algorithm> <Operate, >> <Operate, #> <Keyword, include> <Operate, <> <Identifier, iostream> <Operate, >> <Keyword, using> <Keyword, namespace> <Identifier, std> <Semicolon, ;> <Keyword, struct> <Identifier, node> <OpenParen, {> <Keyword, int> <Identifier, no> <Operate, ,> <Identifier, totn> <Semicolon, ;> <Identifier, node> <Operate, *> <Identifier, next> <Semicolon, ;> <Identifier, node> <OpenParen, (> <Keyword, int> <Identifier, non> <Operate, => <Number, 0> <Operate, ,> <Keyword, int> <Identifier, tott> <Operate, => <Number, 0> <Operate, ,> <Identifier, node> <Operate, *> <Identifier, ne> <Operate, => <Identifier, NULL> <CloseParen, )> <OpenParen, {> <Identifier, no> <Operate, => <Identifier, non> <Semicolon, ;> <Identifier, totn> <Operate, => <Identifier, tott> <Semicolon, ;> <Identifier, next> <Operate, => <Identifier, ne> <Semicolon, ;> <CloseParen, }> <CloseParen, }> <Identifier, p> <Operate, [> <Number, 11> <Operate, ]> <Semicolon, ;> <Keyword, int> <Identifier, n> <Operate, ,> <Identifier, m> <Operate, ,> <Identifier, s> <Operate, ,> <Identifier, l> <Operate, ,> <Identifier, ans> <Operate, => <Number, 0> <Operate, ,> <Identifier, tot> <Operate, => <Number, 0> <Operate, ,> <Identifier, d> <Operate, [> <Number, 11> <Operate, ]> <Operate, => <OpenParen, {> <Number, 0> <CloseParen, }> <Operate, ,> <Identifier, add> <Operate, => <Number, 1> <Semicolon, ;> <Keyword, void> <Identifier, dfs> <OpenParen, (> <Keyword, int> <Identifier, k> <CloseParen, )> <OpenParen, {> <Keyword, if> <OpenParen, (> <Identifier, tot> <Operate, ==> <Identifier, l> <CloseParen, )> <OpenParen, {> <Identifier, ans> <Operate, +=> <Identifier, add> <Semicolon, ;> <CloseParen, }> <Identifier, node> <Operate, *> <Identifier, q> <Operate, => <Identifier, p> <Operate, [> <Identifier, k> <Operate, ]> <Operate, .> <Identifier, next> <Semicolon, ;> <Keyword, while> <OpenParen, (> <Identifier, q> <CloseParen, )> <OpenParen, {> <Keyword, if> <OpenParen, (> <Operate, !> <Identifier, d> <Operate, [> <Identifier, q> <Operate, ->> <Identifier, no> <Operate, ]> <CloseParen, )> <OpenParen, {> <Operate, ++> <Identifier, tot> <Semicolon, ;> <Identifier, d> <Operate, [> <Identifier, q> <Operate, ->> <Identifier, no> <Operate, ]> <Operate, => <Number, 1> <Semicolon, ;> <Identifier, add> <Operate, *=> <Identifier, q> <Operate, ->> <Identifier, totn> <Semicolon, ;> <Identifier, dfs> <OpenParen, (> <Identifier, q> <Operate, ->> <Identifier, no> <CloseParen, )> <Semicolon, ;> <Identifier, add> <Operate, /=> <Identifier, q> <Operate, ->> <Identifier, totn> <Semicolon, ;> <Operate, --> <Identifier, tot> <Semicolon, ;> <Identifier, d> <Operate, [> <Identifier, q> <Operate, ->> <Identifier, no> <Operate, ]> <Operate, => <Number, 0> <Semicolon, ;> <CloseParen, }> <Identifier, q> <Operate, => <Identifier, q> <Operate, ->> <Identifier, next> <Semicolon, ;> <CloseParen, }> <Keyword, return> <Semicolon, ;> <CloseParen, }> <Keyword, int> <Identifier, main> <OpenParen, (> <CloseParen, )> <OpenParen, {> <Identifier, freopen> <OpenParen, (> <String, "1233.in"> <Operate, ,> <String, "r"> <Operate, ,> <Identifier, stdin> <CloseParen, )> <Semicolon, ;> <Identifier, node> <Operate, *> <Identifier, q> <Semicolon, ;> <Identifier, scanf> <OpenParen, (> <String, "%d%d%d%d"> <Operate, ,> <Operate, &> <Identifier, n> <Operate, ,> <Operate, &> <Identifier, m> <Operate, ,> <Operate, &> <Identifier, s> <Operate, ,> <Operate, &> <Identifier, l> <CloseParen, )> <Semicolon, ;> <Keyword, for> <OpenParen, (> <Keyword, int> <Identifier, i> <Operate, => <Number, 1> <Semicolon, ;> <Identifier, i> <Operate, <=> <Identifier, m> <Semicolon, ;> <Operate, ++> <Identifier, i> <CloseParen, )> <OpenParen, {> <Keyword, int> <Identifier, x> <Operate, ,> <Identifier, y> <Semicolon, ;> <Identifier, scanf> <OpenParen, (> <String, "%d%d"> <Operate, ,> <Operate, &> <Identifier, x> <Operate, ,> <Operate, &> <Identifier, y> <CloseParen, )> <Semicolon, ;> <Identifier, q> <Operate, => <Identifier, p> <Operate, [> <Identifier, x> <Operate, ]> <Operate, .> <Identifier, next> <Semicolon, ;> <Keyword, int> <Identifier, f> <Operate, => <Number, 0> <Semicolon, ;> <Keyword, while> <OpenParen, (> <Identifier, q> <CloseParen, )> <OpenParen, {> <Keyword, if> <OpenParen, (> <Identifier, q> <Operate, ->> <Identifier, no> <Operate, ==> <Identifier, y> <CloseParen, )> <OpenParen, {> <Identifier, f> <Operate, => <Number, 1> <Semicolon, ;> <Operate, ++> <Identifier, q> <Operate, ->> <Identifier, totn> <Semicolon, ;> <Keyword, break> <Semicolon, ;> <CloseParen, }> <Identifier, q> <Operate, => <Identifier, q> <Operate, ->> <Identifier, next> <Semicolon, ;> <CloseParen, }> <Keyword, if> <OpenParen, (> <Operate, !> <Identifier, f> <CloseParen, )> <OpenParen, {> <Identifier, q> <Operate, => <Keyword, new> <Identifier, node> <OpenParen, (> <Identifier, y> <Operate, ,> <Number, 1> <Operate, ,> <Identifier, p> <Operate, [> <Identifier, x> <Operate, ]> <Operate, .> <Identifier, next> <CloseParen, )> <Semicolon, ;> <Identifier, p> <Operate, [> <Identifier, x> <Operate, ]> <Operate, .> <Identifier, next> <Operate, => <Identifier, q> <Semicolon, ;> <CloseParen, }> <CloseParen, }> <Identifier, d> <Operate, [> <Identifier, s> <Operate, ]> <Operate, => <Number, 1> <Semicolon, ;> <Identifier, dfs> <OpenParen, (> <Identifier, s> <CloseParen, )> <Semicolon, ;> <Identifier, printf> <OpenParen, (> <String, "%d\n"> <Operate, ,> <Identifier, ans> <CloseParen, )> <Semicolon, ;> <Keyword, return> <Number, 0> <Semicolon, ;> <CloseParen, }> 
